package app

import (
	"github.com/go-telegram-bot-api/telegram-bot-api"
	"github.com/lowitea/jeevez/internal/config"
	"github.com/lowitea/jeevez/internal/handlers"
	"github.com/lowitea/jeevez/internal/scheduler"
	"github.com/lowitea/jeevez/internal/tools"
	"log"
)

// Run —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞—é—â–∞—è –±–æ—Ç
func Run() {
	// –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥
	cfg, err := config.InitConfig()
	if err != nil {
		log.Fatalf("env parse error %s", err)
	}

	bot, err := tgbotapi.NewBotAPI(cfg.Telegram.Token)
	if err != nil {
		log.Fatalf("error connect to telegram %s", err)
	}
	log.Printf("Bot version: %s", cfg.App.Version)
	log.Printf("Authorized on account %s", bot.Self.UserName)

	// –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–µ—à (–ø–æ–∫–∞ –Ω–µ –Ω—É–∂–µ–Ω)
	//cache, _ := bigcache.NewBigCache(bigcache.DefaultConfig(12 * time.Hour))

	// –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã
	db, err := tools.InitDB(cfg.DB.Host, cfg.DB.Port, cfg.DB.User, cfg.DB.Password, cfg.DB.DBName)
	if err != nil {
		log.Fatalf("error init database %s", err)
	}

	// –∑–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
	go scheduler.Run(bot, db)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 1
	updates, _ := bot.GetUpdatesChan(u)

	// –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ—É –æ –∑–∞–ø—É—Å–∫–µ
	msg := tgbotapi.NewMessage(
		cfg.Telegram.Admin,
		"ü§µüèª –Ø –æ–±–Ω–æ–≤–∏–ª—Å—è! :)\n–ú–æ—è –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: "+cfg.App.Version,
	)
	_, _ = bot.Send(msg)

	// –∑–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
	for update := range updates {
		// –ø—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ—Ç
		if update.Message == nil {
			continue
		}
		go handlers.StartHandler(update, bot, db)
		go handlers.BaseCommandHandler(update, bot)
		go handlers.CurrencyConverterHandler(update, bot, db)
		go handlers.SwitchHandler(update, bot)
		go handlers.SubscriptionsHandler(update, bot, db)
		go handlers.DecorateTextHandler(update, bot)
	}
}
